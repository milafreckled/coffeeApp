{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/service-worker\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/icon\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(snackBar, swUpdate) {\n      this.snackBar = snackBar;\n      this.swUpdate = swUpdate;\n    }\n    updateNetworkStatusUI() {\n      if (navigator.onLine) {\n        document.querySelector('body').style = \"\";\n      } else {\n        document.querySelector('body').style = \"filter: grayscale(1)\";\n      }\n    }\n    subscribeToPush() {\n      Notification.requestPermission(result => {\n        if (result === \"granted\") {\n          console.log(\"Permission granted!\");\n          // this.ngsw.registerForPush({applicationServerKey: ''})\n          //   .susbcribe((registration: NgPushRegistration) => registration)\n        }\n      });\n    }\n\n    ngOnInit() {\n      this.swUpdate.versionUpdates.subscribe(update => {\n        switch (update.type) {\n          case 'VERSION_DETECTED':\n            const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install now\", {\n              duration: 4000\n            });\n            sb.onAction().subscribe(e => this.swUpdate.activateUpdate());\n            console.log(`Downloading new app version: ${update.version.hash}`);\n            location.reload();\n            break;\n          case 'VERSION_READY':\n            console.log(`Current app version: ${update.currentVersion.hash}`);\n            console.log(`New app version ready for use: ${update.latestVersion.hash}`);\n            break;\n          case 'VERSION_INSTALLATION_FAILED':\n            console.log(`Failed to install app version '${update.version.hash}': ${update.error}`);\n            break;\n        }\n      });\n      this.swUpdate.checkForUpdate();\n      window.addEventListener(\"online\", this.updateNetworkStatusUI);\n      window.addEventListener(\"offline\", this.updateNetworkStatusUI);\n      if (navigator.standalone === false) {\n        this.snackBar.open(\"You can add this PWA to a home screen\", \"\", {\n          duration: 3000\n        });\n      } else if (navigator.standalone === undefined) {\n        if (window.matchMedia(\"(display-mode: browser)\").matches) {\n          window.addEventListener(\"beforeinstallprompt\", event => {\n            event.preventDefault();\n            const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install\", {\n              duration: 5000\n            });\n            sb.onAction().subscribe(() => {\n              event.prompt();\n              event.userChoice().then(result => {\n                if (result.outcome === \"dismisses\") {} else {}\n              });\n            });\n            return false;\n          });\n        }\n      }\n    }\n  }\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.SwUpdate));\n  };\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 7,\n    vars: 0,\n    consts: [[\"color\", \"primary\"], [\"matButton\", \"\", 3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"My Coffee app\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"a\", 1);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_3_listener() {\n          return ctx.subscribeToPush();\n        });\n        i0.ɵɵelementStart(4, \"mat-icon\");\n        i0.ɵɵtext(5, \"message\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(6, \"router-outlet\");\n      }\n    },\n    dependencies: [i3.RouterOutlet, i4.MatToolbar, i5.MatIcon]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}