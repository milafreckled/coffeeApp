{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { PasswordErrorStateMatcher } from './errorStateMatcher';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/card\";\nfunction RegisterComponent_form_0_mat_error_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_form_0_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid pattern\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_form_0_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_form_0_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid pattern\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_form_0_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Passwords don't match!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_form_0_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid pattern\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_form_0_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onRegister());\n    });\n    i0.ɵɵelementStart(1, \"mat-card\", 3)(2, \"mat-form-field\");\n    i0.ɵɵelement(3, \"input\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, RegisterComponent_form_0_mat_error_4_Template, 2, 0, \"mat-error\", 1);\n    i0.ɵɵtemplate(5, RegisterComponent_form_0_mat_error_5_Template, 2, 0, \"mat-error\", 1);\n    i0.ɵɵelementStart(6, \"mat-form-field\");\n    i0.ɵɵelement(7, \"input\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, RegisterComponent_form_0_mat_error_8_Template, 2, 0, \"mat-error\", 1);\n    i0.ɵɵtemplate(9, RegisterComponent_form_0_mat_error_9_Template, 2, 0, \"mat-error\", 1);\n    i0.ɵɵelementStart(10, \"mat-form-field\");\n    i0.ɵɵelement(11, \"input\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, RegisterComponent_form_0_mat_error_12_Template, 2, 0, \"mat-error\", 1);\n    i0.ɵɵtemplate(13, RegisterComponent_form_0_mat_error_13_Template, 2, 0, \"mat-error\", 1);\n    i0.ɵɵelementStart(14, \"button\", 7);\n    i0.ɵɵtext(15, \"Register\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"a\", 8);\n    i0.ɵɵtext(17, \"Already registered? Login here.\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    let tmp_2_0;\n    let tmp_3_0;\n    let tmp_4_0;\n    let tmp_6_0;\n    let tmp_7_0;\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.registerForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_1_0.dirty) && ((tmp_1_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_1_0.untouched) && ctx_r0.registerForm.hasError(\"required\", \"username\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_2_0.dirty) && ((tmp_2_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_2_0.untouched) && ctx_r0.registerForm.hasError(\"pattern\", \"username\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx_r0.registerForm.get(\"password\")) == null ? null : tmp_3_0.dirty) && ((tmp_3_0 = ctx_r0.registerForm.get(\"password\")) == null ? null : tmp_3_0.untouched) && ctx_r0.registerForm.hasError(\"required\", \"password\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx_r0.registerForm.get(\"password\")) == null ? null : tmp_4_0.dirty) && ((tmp_4_0 = ctx_r0.registerForm.get(\"password\")) == null ? null : tmp_4_0.untouched) && ctx_r0.registerForm.hasError(\"pattern\", \"password\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"errorStateMatcher\", ctx_r0.matcher);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_6_0 = ctx_r0.registerForm.get(\"passwordConfirmation\")) == null ? null : tmp_6_0.dirty) && ((tmp_6_0 = ctx_r0.registerForm.get(\"passwordConfirmation\")) == null ? null : tmp_6_0.untouched) && ctx_r0.registerForm.hasError(\"notSame\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_7_0 = ctx_r0.registerForm.get(\"passwordConfirmation\")) == null ? null : tmp_7_0.dirty) && ((tmp_7_0 = ctx_r0.registerForm.get(\"passwordConfirmation\")) == null ? null : tmp_7_0.untouched) && ctx_r0.registerForm.hasError(\"pattern\", \"passwordConfirmation\"));\n  }\n}\nfunction RegisterComponent_h2_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.registerMessage);\n  }\n}\nexport class RegisterComponent {\n  constructor(auth) {\n    this.auth = auth;\n    this.matcher = new PasswordErrorStateMatcher();\n    this.registerMessage = null;\n    this.checkPasswords = group => {\n      let pass = group.get('password')?.value;\n      let confirmPass = group.get('passwordConfirmation')?.value;\n      return pass === confirmPass ? null : {\n        notSame: true\n      };\n    };\n    this.registerForm = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_]{3,}/)]),\n      password: new FormControl('', [Validators.required, Validators.pattern(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/)]),\n      passwordConfirmation: new FormControl('', [Validators.required, Validators.pattern(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/)])\n    }, {\n      validators: this.checkPasswords\n    });\n  }\n  onRegister() {\n    this.auth.register(this.registerForm.value).subscribe(response => {\n      if (response.message) {\n        this.registerMessage = response.message;\n      }\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 3,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [\"outlined\", \"\"], [\"matInput\", \"\", \"name\", \"username\", \"placeholder\", \"Username\", \"formControlName\", \"username\"], [\"matInput\", \"\", \"type\", \"password\", \"name\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"matInput\", \"\", \"type\", \"password\", \"name\", \"passwordConfirmation\", \"placeholder\", \"Confirm password\", \"formControlName\", \"passwordConfirmation\", 3, \"errorStateMatcher\"], [\"mat-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [\"mat-button\", \"\", \"href\", \"/login\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegisterComponent_form_0_Template, 18, 8, \"form\", 0);\n      i0.ɵɵelementStart(1, \"mat-card\");\n      i0.ɵɵtemplate(2, RegisterComponent_h2_2_Template, 2, 1, \"h2\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.registerMessage);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerMessage);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i3.NgIf, i4.MatAnchor, i4.MatButton, i5.MatInput, i6.MatFormField, i6.MatError, i7.MatCard],\n  styles: [\"form[_ngcontent-%COMP%]{\\n    max-width: 90vw;\\n    margin-top: 1rem;\\n    border-radius: 20%;\\n    margin-inline: auto;\\n}\\n\\nmat-card[_ngcontent-%COMP%]{\\n    padding: 3% 5%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGNBQWM7QUFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJmb3Jte1xuICAgIG1heC13aWR0aDogOTB2dztcbiAgICBtYXJnaW4tdG9wOiAxcmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDIwJTtcbiAgICBtYXJnaW4taW5saW5lOiBhdXRvO1xufVxuXG5tYXQtY2FyZHtcbiAgICBwYWRkaW5nOiAzJSA1JTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","PasswordErrorStateMatcher","i0","RegisterComponent","constructor","auth","group","pass","get","value","confirmPass","notSame","username","required","pattern","password","passwordConfirmation","validators","checkPasswords","onRegister","register","registerForm","subscribe","response","message","registerMessage","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/register/register.component.ts","/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/register/register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { User } from '../logic/User';\nimport { AuthService } from '../auth.service';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { PasswordErrorStateMatcher } from './errorStateMatcher';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  constructor(private auth: AuthService){}\n  matcher = new PasswordErrorStateMatcher();\n  registerMessage: string | null = null;\n  checkPasswords: ValidatorFn = (group: AbstractControl):  ValidationErrors | null => { \n    let pass = group.get('password')?.value;\n    let confirmPass = group.get('passwordConfirmation')?.value\n    return pass === confirmPass ? null : { notSame: true }\n  }\n\n  registerForm = new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_]{3,}/)]),\n    password: new FormControl('', [Validators.required, Validators.pattern(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/)]),\n    passwordConfirmation: new FormControl('', [Validators.required, Validators.pattern(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/)]),\n  }, {validators: this.checkPasswords});\n  \n  onRegister(){\n    this.auth.register(this.registerForm.value as User).subscribe((response: any) => {\n      if (response.message){\n        this.registerMessage = response.message;\n      }\n    });\n  }\n}\n","<form *ngIf=\"!registerMessage\" [formGroup]=\"registerForm\" (ngSubmit)=\"onRegister()\">\n    <mat-card outlined>\n    <mat-form-field>\n        <input matInput name=\"username\" placeholder=\"Username\" formControlName=\"username\"/>\n    </mat-form-field>\n    <mat-error *ngIf=\"registerForm.get('username')?.dirty && registerForm.get('username')?.untouched && registerForm.hasError('required', 'username')\">Username is required</mat-error>\n    <mat-error *ngIf=\"registerForm.get('username')?.dirty && registerForm.get('username')?.untouched && registerForm.hasError('pattern', 'username')\">Invalid pattern</mat-error>\n    <mat-form-field>\n        <input matInput type=\"password\" name=\"password\" placeholder=\"Password\" formControlName=\"password\"/>\n    </mat-form-field>\n    <mat-error *ngIf=\"registerForm.get('password')?.dirty && registerForm.get('password')?.untouched && registerForm.hasError('required', 'password')\">Password is required</mat-error>\n    <mat-error *ngIf=\"registerForm.get('password')?.dirty && registerForm.get('password')?.untouched && registerForm.hasError('pattern', 'password')\">Invalid pattern</mat-error>\n    <mat-form-field>\n        <input matInput type=\"password\" name=\"passwordConfirmation\" placeholder=\"Confirm password\" \n        formControlName=\"passwordConfirmation\" [errorStateMatcher]=\"matcher\"/>\n    </mat-form-field>\n    <mat-error *ngIf=\"registerForm.get('passwordConfirmation')?.dirty && registerForm.get('passwordConfirmation')?.untouched && registerForm.hasError('notSame')\">Passwords don't match!</mat-error>\n    <mat-error *ngIf=\"registerForm.get('passwordConfirmation')?.dirty && registerForm.get('passwordConfirmation')?.untouched && registerForm.hasError('pattern', 'passwordConfirmation')\">Invalid pattern</mat-error>\n    <button mat-button color=\"primary\" type=\"submit\">Register</button>\n    <a mat-button href=\"/login\">Already registered? Login here.</a>\n</mat-card>\n</form>\n<mat-card>\n    <h2 *ngIf=\"registerMessage\">{{registerMessage}}</h2>\n</mat-card>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}