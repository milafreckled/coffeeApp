{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { PasswordErrorStateMatcher } from './errorStateMatcher';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class RegisterComponent {\n  constructor(auth) {\n    this.auth = auth;\n    this.matcher = new PasswordErrorStateMatcher();\n    this.checkPasswords = group => {\n      let pass = group.get('password')?.value;\n      let confirmPass = group.get('passwordConfirmation')?.value;\n      return pass === confirmPass ? null : {\n        notSame: true\n      };\n    };\n    this.registerForm = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_\\!\\?\\.]{3,}/)]),\n      password: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_#%^\\!\\?\\.]{8,}/)]),\n      passwordConfirmation: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_#%^\\!\\?\\.]{8,}/)])\n    }, {\n      validators: this.checkPasswords\n    });\n  }\n  onRegister() {\n    this.auth.login(this.registerForm.value).subscribe(msg => console.log(msg));\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 2,\n  vars: 0,\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"register works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAGA,SAA0BA,WAAW,EAAEC,SAAS,EAAiCC,UAAU,QAAQ,gBAAgB;AACnH,SAASC,yBAAyB,QAAQ,qBAAqB;;;AAO/D,OAAM,MAAOC,iBAAiB;EAC5BC,YAAoBC,IAAiB;IAAjB,SAAI,GAAJA,IAAI;IACxB,YAAO,GAAG,IAAIH,yBAAyB,EAAE;IACzC,mBAAc,GAAiBI,KAAsB,IAA8B;MACjF,IAAIC,IAAI,GAAGD,KAAK,CAACE,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;MACvC,IAAIC,WAAW,GAAGJ,KAAK,CAACE,GAAG,CAAC,sBAAsB,CAAC,EAAEC,KAAK;MAC1D,OAAOF,IAAI,KAAKG,WAAW,GAAG,IAAI,GAAG;QAAEC,OAAO,EAAE;MAAI,CAAE;IACxD,CAAC;IAED,iBAAY,GAAG,IAAIX,SAAS,CAAC;MAC3BY,QAAQ,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;MAClGC,QAAQ,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC;MACrGE,oBAAoB,EAAE,IAAIjB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,OAAO,CAAC,2BAA2B,CAAC,CAAC;KACjH,EAAE;MAACG,UAAU,EAAE,IAAI,CAACC;IAAc,CAAC,CAAC;EAZE;EAcvCC,UAAU;IACR,IAAI,CAACd,IAAI,CAACe,KAAK,CAAC,IAAI,CAACC,YAAY,CAACZ,KAAa,CAAC,CAACa,SAAS,CAAEC,GAAQ,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EAC5F;;AAjBWpB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAuB;EAAAC;EAAAC;EAAAC;IAAA;MCX9BC,yBAAG;MAAAA,+BAAe;MAAAA,iBAAI","names":["FormControl","FormGroup","Validators","PasswordErrorStateMatcher","RegisterComponent","constructor","auth","group","pass","get","value","confirmPass","notSame","username","required","pattern","password","passwordConfirmation","validators","checkPasswords","onRegister","login","registerForm","subscribe","msg","console","log","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/register/register.component.ts","/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/register/register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { User } from '../logic/User';\nimport { AuthService } from '../auth.service';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { PasswordErrorStateMatcher } from './errorStateMatcher';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  constructor(private auth: AuthService){}\n  matcher = new PasswordErrorStateMatcher();\n  checkPasswords: ValidatorFn = (group: AbstractControl):  ValidationErrors | null => { \n    let pass = group.get('password')?.value;\n    let confirmPass = group.get('passwordConfirmation')?.value\n    return pass === confirmPass ? null : { notSame: true }\n  }\n\n  registerForm = new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_\\!\\?\\.]{3,}/)]),\n    password: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_#%^\\!\\?\\.]{8,}/)]),\n    passwordConfirmation: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_#%^\\!\\?\\.]{8,}/)]),\n  }, {validators: this.checkPasswords});\n  \n  onRegister(){\n    this.auth.login(this.registerForm.value as User).subscribe((msg: any) => console.log(msg));\n  }\n}\n","<p>register works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}