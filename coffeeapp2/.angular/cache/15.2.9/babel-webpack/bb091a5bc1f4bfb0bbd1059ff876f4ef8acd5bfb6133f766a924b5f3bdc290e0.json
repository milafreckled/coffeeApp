{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { PasswordErrorStateMatcher } from './errorStateMatcher';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/card\";\nfunction RegisterComponent_mat_error_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Passwords don't match!\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(auth) {\n    this.auth = auth;\n    this.matcher = new PasswordErrorStateMatcher();\n    this.checkPasswords = group => {\n      let pass = group.get('password')?.value;\n      let confirmPass = group.get('passwordConfirmation')?.value;\n      return pass === confirmPass ? null : {\n        notSame: true\n      };\n    };\n    this.registerForm = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_\\!\\?\\.]{3,}/)]),\n      password: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_#%^\\!\\?\\.]{8,}/)]),\n      passwordConfirmation: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_#%^\\!\\?\\.]{8,}/)])\n    }, {\n      validators: this.checkPasswords\n    });\n  }\n  onRegister() {\n    this.auth.login(this.registerForm.value).subscribe(msg => console.log(msg));\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 15,\n  vars: 5,\n  consts: [[\"ngSubmit\", \"onRegister()\", 3, \"formGroup\"], [\"matInput\", \"\", \"name\", \"username\", \"placeholder\", \"Username\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"name\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"matInput\", \"\", \"type\", \"password\", \"name\", \"passwordConfirmation\", \"placeholder\", \"Confirm password\", \"formControlName\", \"passwordConfirmation\", 3, \"errorStateMatcher\"], [\"mat-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [\"mat-button\", \"\", \"href\", \"/login\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-card\")(2, \"mat-form-field\");\n      i0.ɵɵelement(3, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, RegisterComponent_mat_error_4_Template, 2, 0, \"mat-error\", 2);\n      i0.ɵɵelementStart(5, \"mat-form-field\");\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, RegisterComponent_mat_error_7_Template, 2, 0, \"mat-error\", 2);\n      i0.ɵɵelementStart(8, \"mat-form-field\");\n      i0.ɵɵelement(9, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, RegisterComponent_mat_error_10_Template, 2, 0, \"mat-error\", 2);\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵtext(12, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"a\", 6);\n      i0.ɵɵtext(14, \"Already registered? Login here.\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_1_0.dirty) && ((tmp_1_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_1_0.untouched) && ctx.registerForm.hasError(\"required\", \"username\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.dirty) && ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.untouched) && ctx.registerForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"errorStateMatcher\", ctx.matcher);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerForm.hasError(\"notSame\"));\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i3.NgIf, i4.MatAnchor, i4.MatButton, i5.MatInput, i6.MatFormField, i6.MatError, i7.MatCard],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAGA,SAA0BA,WAAW,EAAEC,SAAS,EAAiCC,UAAU,QAAQ,gBAAgB;AACnH,SAASC,yBAAyB,QAAQ,qBAAqB;;;;;;;;;;;ICC3DC,iCAAmJ;IAAAA,oCAAoB;IAAAA,iBAAY;;;;;IAInLA,iCAAmJ;IAAAA,oCAAoB;IAAAA,iBAAY;;;;;IAKnLA,iCAAoD;IAAAA,sCAAsB;IAAAA,iBAAY;;;ADH1F,OAAM,MAAOC,iBAAiB;EAC5BC,YAAoBC,IAAiB;IAAjB,SAAI,GAAJA,IAAI;IACxB,YAAO,GAAG,IAAIJ,yBAAyB,EAAE;IACzC,mBAAc,GAAiBK,KAAsB,IAA8B;MACjF,IAAIC,IAAI,GAAGD,KAAK,CAACE,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;MACvC,IAAIC,WAAW,GAAGJ,KAAK,CAACE,GAAG,CAAC,sBAAsB,CAAC,EAAEC,KAAK;MAC1D,OAAOF,IAAI,KAAKG,WAAW,GAAG,IAAI,GAAG;QAAEC,OAAO,EAAE;MAAI,CAAE;IACxD,CAAC;IAED,iBAAY,GAAG,IAAIZ,SAAS,CAAC;MAC3Ba,QAAQ,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;MAClGC,QAAQ,EAAE,IAAIjB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC;MACrGE,oBAAoB,EAAE,IAAIlB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,OAAO,CAAC,2BAA2B,CAAC,CAAC;KACjH,EAAE;MAACG,UAAU,EAAE,IAAI,CAACC;IAAc,CAAC,CAAC;EAZE;EAcvCC,UAAU;IACR,IAAI,CAACd,IAAI,CAACe,KAAK,CAAC,IAAI,CAACC,YAAY,CAACZ,KAAa,CAAC,CAACa,SAAS,CAAEC,GAAQ,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EAC5F;;AAjBWpB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAuB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX9B5B,+BAAyD;MAGjDA,2BAAmF;MACvFA,iBAAiB;MACjBA,8EAAmL;MACnLA,sCAAgB;MACZA,2BAAmG;MACvGA,iBAAiB;MACjBA,8EAAmL;MACnLA,sCAAgB;MACZA,2BACsE;MAC1EA,iBAAiB;MACjBA,gFAAsF;MACtFA,kCAAiD;MAAAA,yBAAQ;MAAAA,iBAAS;MAClEA,6BAA4B;MAAAA,gDAA+B;MAAAA,iBAAI;;;;;MAhB7DA,4CAA0B;MAKhBA,eAAqI;MAArIA,8OAAqI;MAIrIA,eAAqI;MAArIA,8OAAqI;MAGtGA,eAA6B;MAA7BA,+CAA6B;MAE5DA,eAAsC;MAAtCA,2DAAsC","names":["FormControl","FormGroup","Validators","PasswordErrorStateMatcher","i0","RegisterComponent","constructor","auth","group","pass","get","value","confirmPass","notSame","username","required","pattern","password","passwordConfirmation","validators","checkPasswords","onRegister","login","registerForm","subscribe","msg","console","log","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/register/register.component.ts","/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/register/register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { User } from '../logic/User';\nimport { AuthService } from '../auth.service';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { PasswordErrorStateMatcher } from './errorStateMatcher';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  constructor(private auth: AuthService){}\n  matcher = new PasswordErrorStateMatcher();\n  checkPasswords: ValidatorFn = (group: AbstractControl):  ValidationErrors | null => { \n    let pass = group.get('password')?.value;\n    let confirmPass = group.get('passwordConfirmation')?.value\n    return pass === confirmPass ? null : { notSame: true }\n  }\n\n  registerForm = new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_\\!\\?\\.]{3,}/)]),\n    password: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_#%^\\!\\?\\.]{8,}/)]),\n    passwordConfirmation: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_#%^\\!\\?\\.]{8,}/)]),\n  }, {validators: this.checkPasswords});\n  \n  onRegister(){\n    this.auth.login(this.registerForm.value as User).subscribe((msg: any) => console.log(msg));\n  }\n}\n","<form [formGroup]=\"registerForm\" ngSubmit=\"onRegister()\">\n<mat-card>\n    <mat-form-field>\n        <input matInput name=\"username\" placeholder=\"Username\" formControlName=\"username\"/>\n    </mat-form-field>\n    <mat-error *ngIf=\"registerForm.get('username')?.dirty && registerForm.get('username')?.untouched && registerForm.hasError('required', 'username')\">Username is required</mat-error>\n    <mat-form-field>\n        <input matInput type=\"password\" name=\"password\" placeholder=\"Password\" formControlName=\"password\"/>\n    </mat-form-field>\n    <mat-error *ngIf=\"registerForm.get('password')?.dirty && registerForm.get('password')?.untouched && registerForm.hasError('required', 'password')\">Password is required</mat-error>\n    <mat-form-field>\n        <input matInput type=\"password\" name=\"passwordConfirmation\" placeholder=\"Confirm password\" \n        formControlName=\"passwordConfirmation\" [errorStateMatcher]=\"matcher\"/>\n    </mat-form-field>\n    <mat-error *ngIf=\"registerForm.hasError('notSame')\">Passwords don't match!</mat-error>\n    <button mat-button color=\"primary\" type=\"submit\">Register</button>\n    <a mat-button href=\"/login\">Already registered? Login here.</a>\n</mat-card>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}