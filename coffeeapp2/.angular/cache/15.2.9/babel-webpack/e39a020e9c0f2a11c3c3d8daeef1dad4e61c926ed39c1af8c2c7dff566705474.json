{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/service-worker\";\nimport * as i3 from \"./auth.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/material/toolbar\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/icon\";\nexport class AppComponent {\n  constructor(snackBar, swUpdate, auth) {\n    this.snackBar = snackBar;\n    this.swUpdate = swUpdate;\n    this.auth = auth;\n  }\n  updateNetworkStatusUI() {\n    if (navigator.onLine) {\n      document.querySelector('body').style = \"\";\n    } else {\n      document.querySelector('body').style = \"filter: grayscale(1)\";\n    }\n  }\n  subscribeToPush() {\n    Notification.requestPermission(result => {\n      if (result === \"granted\") {\n        console.log(\"Permission granted!\");\n        // this.ngsw.registerForPush({applicationServerKey: ''})\n        //   .susbcribe((registration: NgPushRegistration) => registration)\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.isLoggedIn = this.auth.isLoggedIn();\n    this.swUpdate.versionUpdates.subscribe(update => {\n      switch (update.type) {\n        case 'VERSION_DETECTED':\n          const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install now\", {\n            duration: 4000\n          });\n          sb.onAction().subscribe(e => this.swUpdate.activateUpdate());\n          console.log(`Downloading new app version: ${update.version.hash}`);\n          location.reload();\n          break;\n        case 'VERSION_READY':\n          console.log(`Current app version: ${update.currentVersion.hash}`);\n          console.log(`New app version ready for use: ${update.latestVersion.hash}`);\n          break;\n        case 'VERSION_INSTALLATION_FAILED':\n          console.log(`Failed to install app version '${update.version.hash}': ${update.error}`);\n          break;\n      }\n    });\n    this.swUpdate.checkForUpdate();\n    window.addEventListener(\"online\", this.updateNetworkStatusUI);\n    window.addEventListener(\"offline\", this.updateNetworkStatusUI);\n    if (navigator.standalone === false) {\n      this.snackBar.open(\"You can add this PWA to a home screen\", \"\", {\n        duration: 3000\n      });\n    } else if (navigator.standalone === undefined) {\n      if (window.matchMedia(\"(display-mode: browser)\").matches) {\n        window.addEventListener(\"beforeinstallprompt\", event => {\n          event.preventDefault();\n          const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install\", {\n            duration: 5000\n          });\n          sb.onAction().subscribe(() => {\n            event.prompt();\n            event.userChoice().then(result => {\n              if (result.outcome === \"dismisses\") {} else {}\n            });\n          });\n          return false;\n        });\n      }\n    }\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.SwUpdate), i0.ɵɵdirectiveInject(i3.AuthService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 9,\n  vars: 1,\n  consts: [[\"color\", \"primary\"], [\"matButton\", \"\", 3, \"click\"], [\"color\", \"accent\", \"mat-raised-button\", \"\", 1, \"login-btn\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"My Coffee app\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"a\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_3_listener() {\n        return ctx.subscribeToPush();\n      });\n      i0.ɵɵelementStart(4, \"mat-icon\");\n      i0.ɵɵtext(5, \"message\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"button\", 2);\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(8, \"router-outlet\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate(ctx.isLoggedIn ? \"Logout\" : \"Log In\");\n    }\n  },\n  dependencies: [i4.RouterOutlet, i5.MatToolbar, i6.MatButton, i7.MatIcon],\n  styles: [\"mat-snackbar[_ngcontent-%COMP%]{\\n    display: flex;\\n    justify-content: space-between;\\n}\\n.login-btn[_ngcontent-%COMP%]{\\n    justify-items: flex-end;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0FBQ2xDO0FBQ0E7SUFDSSx1QkFBdUI7QUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtc25hY2tiYXJ7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG4ubG9naW4tYnRue1xuICAgIGp1c3RpZnktaXRlbXM6IGZsZXgtZW5kO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["AppComponent","constructor","snackBar","swUpdate","auth","updateNetworkStatusUI","navigator","onLine","document","querySelector","style","subscribeToPush","Notification","requestPermission","result","console","log","ngOnInit","isLoggedIn","versionUpdates","subscribe","update","type","sb","open","duration","onAction","e","activateUpdate","version","hash","location","reload","currentVersion","latestVersion","error","checkForUpdate","window","addEventListener","standalone","undefined","matchMedia","matches","event","preventDefault","prompt","userChoice","then","outcome","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/app.component.ts","/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SwUpdate } from '@angular/service-worker'\nimport { AuthService } from './auth.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor(private snackBar: MatSnackBar,\n    private swUpdate: SwUpdate, private auth: AuthService){ \n  }\n  isLoggedIn!: boolean;\n  updateNetworkStatusUI(){\n    if (navigator.onLine){\n      (document.querySelector('body') as any).style = \"\"\n    }else{\n      (document.querySelector('body') as any).style = \"filter: grayscale(1)\"\n    }\n  }\n  subscribeToPush(){\n    Notification.requestPermission(result => {\n      if (result === \"granted\"){\n        console.log(\"Permission granted!\")\n        // this.ngsw.registerForPush({applicationServerKey: ''})\n        //   .susbcribe((registration: NgPushRegistration) => registration)\n      }\n    })\n  }\n  ngOnInit(){\n    this.isLoggedIn = this.auth.isLoggedIn();\n    this.swUpdate.versionUpdates.subscribe(update => {\n      switch (update.type){\n        case 'VERSION_DETECTED':  \n          const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install now\", {duration: 4000});       \n          sb.onAction().subscribe(e =>  this.swUpdate.activateUpdate());\n          console.log(`Downloading new app version: ${update.version.hash}`);\n          location.reload();  \n          break;\n        case 'VERSION_READY':\n          console.log(`Current app version: ${update.currentVersion.hash}`);\n          console.log(`New app version ready for use: ${update.latestVersion.hash}`);\n          break;\n        case 'VERSION_INSTALLATION_FAILED':\n          console.log(`Failed to install app version '${update.version.hash}': ${update.error}`);\n          break;\n      }\n    });\n    this.swUpdate.checkForUpdate();\n    window.addEventListener(\"online\", this.updateNetworkStatusUI);\n    window.addEventListener(\"offline\", this.updateNetworkStatusUI);\n    if ((navigator as any).standalone === false){\n    this.snackBar.open(\"You can add this PWA to a home screen\", \"\", {duration: 3000});\n    }else if((navigator as any).standalone === undefined){\n      if (window.matchMedia(\"(display-mode: browser)\").matches){\n      window.addEventListener(\"beforeinstallprompt\", event => {\n        event.preventDefault();\n        const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install\", {duration: 5000});\n        sb.onAction().subscribe(() => {\n          (event as any).prompt();\n          (event as any).userChoice().then((result: { outcome: string; }) => {\n            if (result.outcome === \"dismisses\"){\n\n            }else{\n\n            }\n          })\n        })\n        return false;\n      })\n    }\n  }\n  }\n}\n","<mat-toolbar color=\"primary\">\n  <h1>My Coffee app</h1>\n  <a (click)=\"subscribeToPush()\" matButton><mat-icon>message</mat-icon></a>\n  <button class=\"login-btn\" color=\"accent\" mat-raised-button>{{isLoggedIn ? 'Logout' : 'Log In'}}</button>\n</mat-toolbar>\n\n<router-outlet></router-outlet>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}