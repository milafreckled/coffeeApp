{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/card\";\nfunction LoginComponent_mat_error_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid pattern\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_\\!\\?\\.]{3,}/)]),\n      password: new FormControl('', [Validators.required, Validators.pattern(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/)])\n    });\n  }\n  onLogin() {\n    this.auth.login(this.loginForm.value).subscribe(response => {\n      if (response.username) {\n        this.router.navigate(['']);\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 13,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"matInput\", \"\", \"name\", \"username\", \"placeholder\", \"Username\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"name\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"mat-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [\"mat-button\", \"\", \"href\", \"/register\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onLogin();\n      });\n      i0.ɵɵelementStart(1, \"mat-card\")(2, \"mat-form-field\");\n      i0.ɵɵelement(3, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, LoginComponent_mat_error_4_Template, 2, 0, \"mat-error\", 2);\n      i0.ɵɵelementStart(5, \"mat-form-field\");\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, LoginComponent_mat_error_7_Template, 2, 0, \"mat-error\", 2);\n      i0.ɵɵtemplate(8, LoginComponent_mat_error_8_Template, 2, 0, \"mat-error\", 2);\n      i0.ɵɵelementStart(9, \"button\", 4);\n      i0.ɵɵtext(10, \"Log In\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"a\", 5);\n      i0.ɵɵtext(12, \"No account? Register here.\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.loginForm.get(\"username\")) == null ? null : tmp_1_0.dirty) && ((tmp_1_0 = ctx.loginForm.get(\"username\")) == null ? null : tmp_1_0.untouched) && ctx.loginForm.hasError(\"username\", \"required\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.loginForm.get(\"passwordConfirmation\")) == null ? null : tmp_2_0.dirty) && ((tmp_2_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_2_0.untouched) && ctx.loginForm.hasError(\"password\", \"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.loginForm.get(\"passwordConfirmation\")) == null ? null : tmp_3_0.dirty) && ((tmp_3_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_3_0.untouched) && ctx.loginForm.hasError(\"pattern\", \"passwordConfirmation\"));\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.NgIf, i5.MatAnchor, i5.MatButton, i6.MatInput, i7.MatFormField, i7.MatError, i8.MatCard],\n  styles: [\"form[_ngcontent-%COMP%]{\\n    max-width: 90vw;\\n    margin-top: 1rem;\\n    border-radius: 20%;\\n    margin-inline: auto;\\n}\\n\\ninput[_ngcontent-%COMP%]{\\n    max-width: 50%;\\n}\\n\\nmat-card[_ngcontent-%COMP%]{\\n    padding: 3% 5%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiZm9ybXtcbiAgICBtYXgtd2lkdGg6IDkwdnc7XG4gICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAyMCU7XG4gICAgbWFyZ2luLWlubGluZTogYXV0bztcbn1cblxuaW5wdXR7XG4gICAgbWF4LXdpZHRoOiA1MCU7XG59XG5cbm1hdC1jYXJke1xuICAgIHBhZGRpbmc6IDMlIDUlO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;ICI/DC,iCAA0I;IAAAA,oCAAoB;IAAAA,iBAAY;;;;;IAI1KA,iCAAsJ;IAAAA,oCAAoB;IAAAA,iBAAY;;;;;IACtLA,iCAAiK;IAAAA,+BAAe;IAAAA,iBAAY;;;ADEhM,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,SAAI,GAAJD,IAAI;IAAuB,WAAM,GAANC,MAAM;IACrD,cAAS,GAAG,IAAIN,SAAS,CAAC;MACxBO,QAAQ,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;MAClGC,QAAQ,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,OAAO,CAAC,gEAAgE,CAAC,CAAC;KAC1I,CAAC;EAJ6D;EAM/DE,OAAO;IACL,IAAI,CAACN,IAAI,CAACO,KAAK,CAAC,IAAI,CAACC,SAAS,CAACC,KAAa,CAAC,CAACC,SAAS,CAAEC,QAAa,IAAI;MACxE,IAAIA,QAAQ,CAACT,QAAQ,EAAC;QACpB,IAAI,CAACD,MAAM,CAACW,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEhC,CAAC,CAAC;EACF;;AAdWd,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ3BpB,+BAAqD;MAAvBA;QAAA,OAAYqB,aAAS;MAAA,EAAC;MACpDrB,gCAAW;MAEHA,2BAAmF;MACvFA,iBAAiB;MACjBA,2EAA0K;MAC1KA,sCAAgB;MACZA,2BAAmG;MACvGA,iBAAiB;MACjBA,2EAAsL;MACtLA,2EAA4L;MAC5LA,iCAAiD;MAAAA,uBAAM;MAAAA,iBAAS;MAChEA,6BAA+B;MAAAA,2CAA0B;MAAAA,iBAAI;;;;;;MAZ3DA,yCAAuB;MAKbA,eAA4H;MAA5HA,qOAA4H;MAI5HA,eAAwI;MAAxIA,iPAAwI;MACxIA,eAAmJ;MAAnJA,4PAAmJ","names":["FormControl","FormGroup","Validators","i0","LoginComponent","constructor","auth","router","username","required","pattern","password","onLogin","login","loginForm","value","subscribe","response","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/login/login.component.ts","/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/login/login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { User } from '../logic/User';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  constructor(private auth: AuthService, private router: Router){}\n  loginForm = new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z0-9_\\!\\?\\.]{3,}/)]),\n    password: new FormControl('', [Validators.required, Validators.pattern(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/)]),\n  });\n  \n  onLogin(){\n    this.auth.login(this.loginForm.value as User).subscribe((response: any) => {\n      if (response.username){\n        this.router.navigate(['']);\n      }\n  })\n  }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\n<mat-card >\n    <mat-form-field>\n        <input matInput name=\"username\" placeholder=\"Username\" formControlName=\"username\"/>\n    </mat-form-field>\n    <mat-error *ngIf=\"loginForm.get('username')?.dirty && loginForm.get('username')?.untouched && loginForm.hasError('username', 'required')\">Password is required</mat-error>\n    <mat-form-field>\n        <input matInput type=\"password\" name=\"password\" placeholder=\"Password\" formControlName=\"password\"/>\n    </mat-form-field>\n    <mat-error *ngIf=\"loginForm.get('passwordConfirmation')?.dirty && loginForm.get('password')?.untouched && loginForm.hasError('password', 'required')\">Password is required</mat-error>\n    <mat-error *ngIf=\"loginForm.get('passwordConfirmation')?.dirty && loginForm.get('password')?.untouched && loginForm.hasError('pattern', 'passwordConfirmation')\">Invalid pattern</mat-error>\n    <button mat-button color=\"primary\" type=\"submit\">Log In</button>\n    <a mat-button href=\"/register\">No account? Register here.</a>\n</mat-card>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}