{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(snackBar, swUpdate, router, auth) {\n    this.snackBar = snackBar;\n    this.swUpdate = swUpdate;\n    this.router = router;\n    this.auth = auth;\n  }\n  onLogout() {\n    this.auth.logout().subscribe(response => {\n      if (response === null) {\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n  updateNetworkStatusUI() {\n    if (navigator.onLine) {\n      document.querySelector('body').style = \"\";\n    } else {\n      document.querySelector('body').style = \"filter: grayscale(1)\";\n    }\n  }\n  subscribeToPush() {\n    Notification.requestPermission(result => {\n      if (result === \"granted\") {\n        console.log(\"Permission granted!\");\n        // this.ngsw.registerForPush({applicationServerKey: ''})\n        //   .susbcribe((registration: NgPushRegistration) => registration)\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.auth.userObject$.subscribe(user => {\n      if (user) {\n        this.isLoggedIn = true;\n      } else {\n        this.isLoggedIn = false;\n      }\n    });\n    this.swUpdate.versionUpdates.subscribe(update => {\n      switch (update.type) {\n        case 'VERSION_DETECTED':\n          const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install now\", {\n            duration: 4000\n          });\n          sb.onAction().subscribe(e => this.swUpdate.activateUpdate());\n          console.log(`Downloading new app version: ${update.version.hash}`);\n          location.reload();\n          break;\n        case 'VERSION_READY':\n          console.log(`Current app version: ${update.currentVersion.hash}`);\n          console.log(`New app version ready for use: ${update.latestVersion.hash}`);\n          break;\n        case 'VERSION_INSTALLATION_FAILED':\n          console.log(`Failed to install app version '${update.version.hash}': ${update.error}`);\n          break;\n      }\n    });\n    this.swUpdate.checkForUpdate();\n    window.addEventListener(\"online\", this.updateNetworkStatusUI);\n    window.addEventListener(\"offline\", this.updateNetworkStatusUI);\n    if (navigator.standalone === false) {\n      this.snackBar.open(\"You can add this PWA to a home screen\", \"\", {\n        duration: 3000\n      });\n    } else if (navigator.standalone === undefined) {\n      if (window.matchMedia(\"(display-mode: browser)\").matches) {\n        window.addEventListener(\"beforeinstallprompt\", event => {\n          event.preventDefault();\n          const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install\", {\n            duration: 5000\n          });\n          sb.onAction().subscribe(() => {\n            event.prompt();\n            event.userChoice().then(result => {\n              if (result.outcome === \"dismisses\") {} else {}\n            });\n          });\n          return false;\n        });\n      }\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"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","names":["Component","AppComponent","constructor","snackBar","swUpdate","router","auth","onLogout","logout","subscribe","response","navigate","updateNetworkStatusUI","navigator","onLine","document","querySelector","style","subscribeToPush","Notification","requestPermission","result","console","log","ngOnInit","userObject$","user","isLoggedIn","versionUpdates","update","type","sb","open","duration","onAction","e","activateUpdate","version","hash","location","reload","currentVersion","latestVersion","error","checkForUpdate","window","addEventListener","standalone","undefined","matchMedia","matches","event","preventDefault","prompt","userChoice","then","outcome","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/ludmilamalomuz/Desktop/Frontend projects/coffeeapp-pwa/coffeeapp2/src/app/app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SwUpdate } from '@angular/service-worker'\nimport { AuthService } from './auth.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  constructor(private snackBar: MatSnackBar,\n    private swUpdate: SwUpdate, private router: Router, private auth: AuthService){ }\n  isLoggedIn!: boolean;\n  onLogout() {\n    this.auth.logout().subscribe(response => {\n      if (response === null){\n        this.router.navigate(['/login'])\n      }\n    }\n  }\n  updateNetworkStatusUI(){\n    if (navigator.onLine){\n      (document.querySelector('body') as any).style = \"\"\n    }else{\n      (document.querySelector('body') as any).style = \"filter: grayscale(1)\"\n    }\n  }\n  subscribeToPush(){\n    Notification.requestPermission(result => {\n      if (result === \"granted\"){\n        console.log(\"Permission granted!\")\n        // this.ngsw.registerForPush({applicationServerKey: ''})\n        //   .susbcribe((registration: NgPushRegistration) => registration)\n      }\n    })\n  }\n  ngOnInit(){\n    this.auth.userObject$.subscribe(user => {\n      if (user){\n        this.isLoggedIn = true;\n      }else{\n        this.isLoggedIn = false;\n      }\n    })\n    this.swUpdate.versionUpdates.subscribe(update => {\n      switch (update.type){\n        case 'VERSION_DETECTED':  \n          const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install now\", {duration: 4000});       \n          sb.onAction().subscribe(e =>  this.swUpdate.activateUpdate());\n          console.log(`Downloading new app version: ${update.version.hash}`);\n          location.reload();  \n          break;\n        case 'VERSION_READY':\n          console.log(`Current app version: ${update.currentVersion.hash}`);\n          console.log(`New app version ready for use: ${update.latestVersion.hash}`);\n          break;\n        case 'VERSION_INSTALLATION_FAILED':\n          console.log(`Failed to install app version '${update.version.hash}': ${update.error}`);\n          break;\n      }\n    });\n    this.swUpdate.checkForUpdate();\n    window.addEventListener(\"online\", this.updateNetworkStatusUI);\n    window.addEventListener(\"offline\", this.updateNetworkStatusUI);\n    if ((navigator as any).standalone === false){\n    this.snackBar.open(\"You can add this PWA to a home screen\", \"\", {duration: 3000});\n    }else if((navigator as any).standalone === undefined){\n      if (window.matchMedia(\"(display-mode: browser)\").matches){\n      window.addEventListener(\"beforeinstallprompt\", event => {\n        event.preventDefault();\n        const sb = this.snackBar.open(\"Do you want to install this app?\", \"Install\", {duration: 5000});\n        sb.onAction().subscribe(() => {\n          (event as any).prompt();\n          (event as any).userChoice().then((result: { outcome: string; }) => {\n            if (result.outcome === \"dismisses\"){\n\n            }else{\n\n            }\n          })\n        })\n        return false;\n      })\n    }\n  }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}